#ifndef __MEM_DB_SERVER_LAYOUTS_INC_LAYOUTS_H_
#define __MEM_DB_SERVER_LAYOUTS_INC_LAYOUTS_H_
/*************************************************************************
* Defines the layouts available for the server
* The main purpose of a layout is to manager a
* piece of shared memory. This memory can have
* various properties [size, dynamic growth etc]
* layout offered:
* 1. simple byte array - small static chunks where direct access is needed
* 2. linked list - small/big dynamically growing chunks where no direct
*                  access is needed
* 3. hash - big chunks where fast access is needed
***************************************************************************/
#include<string.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "shm_handler.h"

// TODO move realloc here according to policy
// No sz testing is done here. This is an internal
// structure, no code should use it but friends

const unsigned short MAX_OBJ_NUM=256;
const unsigned short MAX_COL_NUM=20;


#define INV_LOCATION ((unsigned int)-1)
const unsigned short MAX_ARRAY_LAY_SZ=4096;
typedef struct tStack
{

  tStack(){}
  void init(unsigned int i_sz)
  { 
    assert(i_sz <= MAX_OBJ_NUM);
    sz=i_sz;
    capacity=0;
    indx=0;
    m_iter.init(this);
  }

  // Make sure the below are atomic!!
  int push(unsigned int i_slot)
  {
    if(indx < sz)
    {
       pstack[indx]=i_slot;
       capacity++;
    }
    if(indx+1<sz) ++indx;
    return -1;
  }

  unsigned int pop()
  {
    unsigned val=indx;
    if((0 < val) && (sz > val-1))
    {
       val = pstack[indx];
       pstack[indx--] = INV_LOCATION;
       capacity--;
       return val;
    }
    return INV_LOCATION;
  }
  void print_stack()
  {
    for (unsigned int i=0 ; i<capacity && INV_LOCATION != pstack[i] ; ++i)
      printf("stack val: %u\n", pstack[i]);
  }
  class StackIter
  {
  public:
    friend struct tStack;
    void init(tStack* i_stack){m_iter=0;m_stack=i_stack;}
    unsigned int  getNext()
    { 
      if(m_iter < m_stack->sz)
	return m_stack->pstack[m_iter++];
      return INV_LOCATION;
    }
  private:
    unsigned int m_iter;
    tStack* m_stack;
  };

  inline unsigned int getSz()const {return sz;}
  inline unsigned int getCapacity()const {return capacity;}
  StackIter m_iter;

private:


  unsigned int sz;
  unsigned int capacity;
  unsigned indx;
  unsigned int pstack[MAX_OBJ_NUM];

}Stack;

typedef mem_db::BufferSz ColName;
typedef mem_db::BufferSz ResultBuff;
typedef mem_db::Uint32 RawVal;

#define __DAT_TO_RAW(DAT) \
  *(reinterpret_cast<RawVal*>(&DAT))

// resides on v-memory
typedef struct tComparable
{
  tComparable(ColName i_names[],RawVal i_vals[], unsigned int i_sz)
  {
    assert(0 < i_sz); // used by clients
    assert(MAX_COL_NUM >= i_sz);
    for(unsigned int i=0 ; i<i_sz ; ++i)
    {
      memcpy(pName[i].buff, i_names[i].buff, i_names[i].sz);
      pName[i].sz= i_names[i].sz;
      pVals[i]=i_vals[i];
    }
    sz=i_sz;
  }
  unsigned int sz; // How many
  ColName pName[MAX_COL_NUM];
  RawVal pVals[MAX_COL_NUM];
}Comparable;

typedef struct tColumnDef
{
  tColumnDef(ColName i_name, 
             unsigned int i_loc,
             unsigned int i_sz): loc(i_loc), typsz(i_sz)
  {
    memcpy(name.buff, i_name.buff, i_name.sz);
  }
  tColumnDef(){}
  ColName name;
  unsigned int loc;
  unsigned int typsz;
  mem_db::ColTyp typ;
}ColumnDef;

// resides on shm
typedef struct tLayoutHeader
{
  unsigned int sz; // how many
  ColumnDef columns[MAX_COL_NUM];
}LayoutHeader;


/*POD - No code allowed*/
class ArrayLayoutData
{
 private:
  ArrayLayoutData();//pure+private
  ~ArrayLayoutData();
  Stack m_stack;
  Stack m_stackT;
  LayoutHeader m_Header;
  mem_allocator::Pointer m_data;
};


class ArrayLayout
{
private:

  mem_allocator::Pointer m_data;
  // These pointers hold v-memory
  // dont put them on the shm!!!
  Stack* m_stack;
  Stack* m_stackT;
  LayoutHeader* m_pHeader;
  void* m_pdata;
  unsigned int  m_totTypSz;

 public:

  mem_allocator::Pointer getPoint()const {return m_data;}
  LayoutHeader* getHead()const{return m_pHeader;}
  
  /* 
  * C'tor - allocates memory here!! 
  */
  ArrayLayout(const LayoutHeader& i_head,
              ArrayLayoutData* i_playData,
              unsigned int i_sz)
  {
    // init
    void* pshm=0;
    m_totTypSz=0;
    m_stack=0;
    m_stackT=0;
    m_pHeader=0;
    m_pdata=0;

    mem_allocator& alloc= mem_allocator::get_alloc();
  
    assert(0 < (pshm = alloc.allocChunk(i_sz+
					sizeof(ArrayLayoutData))));
    assert(MAX_COL_NUM > i_head.sz);
    // assign pointers
    m_pHeader= __RE_INTPRT_SHM_TO_TYPE(LayoutHeader, pshm);
    m_stack= __RE_INTPRT_SHM_TO_TYPE(Stack, 
                                     m_pHeader+1);
    m_stack->init(MAX_OBJ_NUM);
    m_stackT= __RE_INTPRT_SHM_TO_TYPE(Stack, 
                                     m_stack+1);
    m_stackT->init(MAX_OBJ_NUM);
    m_pdata=__RE_INTPRT_SHM_TO_TYPE(char, 
                                     m_stackT+1);
    LayoutHeader* phead = m_pHeader;

    // TODO write layout header
    for(unsigned int i=0 ; i<i_head.sz ;++i)
    {
      memcpy(phead->columns[i].name.buff,
             i_head.columns[i].name.buff,
             i_head.columns[i].name.sz);
      phead->columns[i].loc=m_totTypSz;
      phead->columns[i].name.sz=i_head.columns[i].name.sz;
      phead->columns[i].typsz=i_head.columns[i].typsz;
      phead->columns[i].typ=i_head.columns[i].typ;
      m_totTypSz+=i_head.columns[i].typsz;
       printf("added column name: %.*s\n", 
           phead->columns[i].name.sz ,
           phead->columns[i].name.buff);
    }
    m_pHeader->sz=i_head.sz;
    printf("finished registering tot type sz: %u\n", m_totTypSz);
    // TODO register the layout in the layout registry
    for(unsigned int i=0 ; i<MAX_OBJ_NUM ; i++)
      m_stack->push(i);

     assert(m_stack->getCapacity() == m_stack->getSz());
  }

  /*
  * This gets a virtual pointer to
  * data in virtual memory, and creats
  * a shared memory entry in the layout
  */
  int addEntry(void* i_pDat)
  {
    assert(0 < i_pDat);
    assert(mem_allocator::NULL_POINTER != m_data);
    assert(0 < m_stack->getSz());
  
    if(0 == m_stack->getCapacity()) return -1;

    char* ptyp = (char*)m_pdata;
    char* inpTyp = __RE_INTPRT_SHM_TO_TYPE(char, i_pDat);
    unsigned int val= m_stack->pop();
    printf("val poped %u\n", val);
    m_stackT->push(val);
    ptyp+=(val*m_totTypSz);
   
    // Writing data
    unsigned int copied=0;
    for(unsigned int i=0;i<m_pHeader->sz;++i)
    {
      memcpy(ptyp+copied, inpTyp+copied, m_pHeader->columns[i].typsz);
      copied+=m_pHeader->columns[i].typsz;
    }
    
     mem_allocator& alloc= mem_allocator::get_alloc();
     alloc.updateActSz(copied, m_pHeader);
    return 0;
  }

  unsigned int updateEntry(const Comparable& i_comp, void* i_pDat)
  {
     assert(mem_allocator::NULL_POINTER != m_data);
    assert(0 < m_stack->getSz());

    if(0 == m_stackT->getCapacity())
      return -1; //nothing to update 

    
    ResultBuff result[2];
   unsigned int resSz=0;

    unsigned int indx=0;
    //TODO consider puting the indices that were updated in res?
    if(INV_LOCATION == (indx = findEntry(i_comp,
                                         result,
                                         resSz)))
       return -1; // no such obj
    char* pInpDat=(char*)i_pDat;

    for(unsigned int i=0;i<i_comp.sz;++i)
    {
      char* ptyp = (char*)m_pdata; 
      ptyp+= (indx*m_totTypSz);
      for(unsigned int j=0;i<m_pHeader->sz;++i)
	{
	  ColumnDef* pcol=&m_pHeader->columns[j];
	  if(0 == 
             memcmp(pcol->name.buff,i_comp.pName[i].buff, pcol->name.sz))
	  {
	    ptyp+=pcol->loc;
            memcpy(ptyp, i_pDat, pcol->typsz);
            pInpDat+=pcol->typsz;
            break;
          }
           
	}
    }
    return indx;
        
  }

  /*
  * This removes an entry from shared memory
  * The data sent contains a field that is the
  * comparable which is used to locate the item
  */
  int delEntry(const Comparable& i_comp)
  {
    assert(mem_allocator::NULL_POINTER != m_data);
    assert(0 < m_stack->getSz());

    if(m_stack->getSz() == m_stack->getCapacity())
       return -1; //empty == no such obj
   
    ResultBuff result[2];
   unsigned int resSz=0;
    
    unsigned int indx=0;
    if(INV_LOCATION == (indx = findEntry(i_comp,
                                         result,
                                         resSz))) 
                return -1; // no such obj

    m_stack->push(indx);
    m_stackT->pop();
    return 0;
  }


  unsigned int findEntry(const Comparable& i_comp, 
                         ResultBuff* o_pTyp,
                         unsigned int& io_num)
  {

    assert(mem_allocator::NULL_POINTER != m_data);
    assert(0 < m_stack->getSz());

    // mem_allocator& alloc= mem_allocator::get_alloc();

    //char* ptyp = (char*)m_pdata;
    const ColName* pCompCol=0;
    RawVal compVal;
    unsigned short matchesFound=0, totMatchFound=0;
    // debug
     Stack::StackIter iter = m_stackT->m_iter;

     for(unsigned int k=0, objIndx=iter.getNext() ; 
	 k<m_stackT->getCapacity();
        objIndx=iter.getNext(), ++k)
    {
      printf("looking into obj %u\n", objIndx);
      char* ptyp = (char*)m_pdata;
      ptyp+=(objIndx*m_totTypSz);
      for(unsigned int i=0;
	  i<i_comp.sz ; 
	  i++)
	{
          pCompCol=&i_comp.pName[i];
          compVal=i_comp.pVals[i];
          
	  ColumnDef* pcol=0;
	  for(unsigned int j=0;
	      j<m_pHeader->sz;
	      j++)
	    {
              pcol=&m_pHeader->columns[j];
	      if(pCompCol->sz != pcol->name.sz) continue;
             
	      char* pvalLoc=ptyp+pcol->loc;
              
	      if((0 == memcmp(pcol->name.buff,pCompCol->buff, pcol->name.sz)) &&
		 (0 == memcmp(&compVal, pvalLoc,pcol->typsz))) 
		{
		  // FOUND A MATCH
                  memcpy(o_pTyp[io_num].buff, ptyp, m_totTypSz);
                  o_pTyp[io_num++].sz=m_totTypSz;
		  matchesFound++;
                  if(matchesFound == i_comp.sz)
		  {
		    printf("obj %u column %u matches nicely\n", objIndx, j);
                    totMatchFound++;
                    matchesFound=0;
                    break;
		  }
		}
	    } // for j
	} // for i
    } // for objIndx
    return totMatchFound;
  }

  /*Cleans shm!!*/
  int destroy()
  {
    mem_allocator& alloc= mem_allocator::get_alloc();
    __SYS_CALL_TEST_RETURN(alloc.disposeChunk(m_data));
    return 0;
  }

  /*
  * This function is used to index the
  * array. Anyone wishing to implement it
  * needs to comply to this API. The return
  * value has to be a valid index num 
  * TODO - is a 64 bit num enough? [-1 reserved for error]
  */
  //int (*pHashFunc) (void* TYP); 
};




#endif // __MEM_DB_SERVER_LAYOUTS_INC_LAYOUTS_H_
