/*
* contains all layout tests
*/
#include <stdio.h>
#include <stdlib.h>
#include "layouts.h"
static int run_suit();
static int test_addEntry_single();
static int test_addEntry_multi();
static int test_findEntry();
static int test_updateEntry();


#define __ASSERT_EQUAL_MESSAGE(EXP,MSG)         \
  if(!(EXP)) printf(MSG);

int main(int argc, char* argv[])
{
  if(-1 == run_suit())
  {
    printf("Error in testing. Exiting\n");
    return -1;
  }
  return 0;
}

int run_suit()
{
  //__SYS_CALL_TEST_RETURN(test_addEntry_single())
  //__SYS_CALL_TEST_RETURN(test_addEntry_multi())
  //__SYS_CALL_TEST_RETURN(test_findEntry())
  __SYS_CALL_TEST_RETURN(test_updateEntry())
  
  return 0;
}


typedef struct tstam
{
  int i;
  float f;
}stam;

int test_addEntry_single()
{
  
   // Prepare Header
  LayoutHeader header;
  memcpy(header.columns[0].name.buff,
         "my_col",
          6);
  header.columns[0].name.sz=6;
  header.columns[0].loc=0;
  header.sz=1;
  ArrayLayout lay(header, 10);
  stam st;
  st.i=1;
  st.f=1.3;
  int s;
  __ASSERT_EQUAL_MESSAGE(0 == (s=lay.addEntry(&st)),"test_addEntry_single")
  __SYS_CALL_TEST_RETURN(s)
  printf("check mem\n");
  scanf("%d", &s);
  return 0;
}

int test_addEntry_multi()
{
  // Prepare Header
  LayoutHeader header;
  memcpy(header.columns[0].name.buff,
         "my_col",
          6);
  header.columns[0].name.sz=6;
  header.columns[0].loc=0;
  header.sz=1;
  ArrayLayout lay(header, 10);
  stam st;
  st.i=1;
  st.f=1.2;
  int s;
  __ASSERT_EQUAL_MESSAGE(0 == (s=lay.addEntry(&st)),"test_addEntry_multi")
   __SYS_CALL_TEST_RETURN(s)
   st.i=2;
  st.f=1.6; 
  __ASSERT_EQUAL_MESSAGE(0 == (s=lay.addEntry(&st)), "test_addEntry_multi")
  __SYS_CALL_TEST_RETURN(s)
 
  printf("check mem\n");
  scanf("%d", &s);

  return 0;
}

int test_findEntry()
{
  // Prepare Comp 
  ColName names[1];
  RawVal vals[1];
  //float val=1.6;
  vals[0]= 2;
  //vals[0]=__DAT_TO_RAW(f);
  /// CONTINUE HERE
  memcpy(names[0].buff,
         "my_col1",
          7);
  names[0].sz=7;
  Comparable comp(names, vals, 1);

  // Prepare Header
  LayoutHeader header;
  memcpy(header.columns[0].name.buff,
         "my_col1",
          7);
  header.columns[0].name.sz=7;
  header.columns[0].loc=0;
  header.columns[0].typsz=sizeof(int);

  memcpy(header.columns[1].name.buff,
         "my_col2",
          7);
 header.columns[1].name.sz=7;
  header.columns[1].loc=1;
  header.columns[1].typsz=sizeof(float);
  header.sz=2;
 
  // Add data to layout
  ArrayLayout lay(header, 10);
  stam st;
  st.i=1;
  st.f=1.3;
  int s;
  __ASSERT_EQUAL_MESSAGE(0 == (s=lay.addEntry(&st)),"test_addEntry_multi")
   __SYS_CALL_TEST_RETURN(s)
   st.i=2;
   st.f=1.6; 
  __ASSERT_EQUAL_MESSAGE(0 == (s=lay.addEntry(&st)), "test_addEntry_multi")
  __SYS_CALL_TEST_RETURN(s)

   __ASSERT_EQUAL_MESSAGE(9 == (s=lay.findEntry(comp, &st)), 
                          "test_findEntry")
 
  printf("check mem\n");
  scanf("%d", &s);

  return 0;
}

int test_updateEntry()
{
  // Prepare Header
  LayoutHeader header;
  memcpy(header.columns[0].name.buff,
         "my_col1",
          7);
  header.columns[0].name.sz=7;
  header.columns[0].loc=0;
  header.columns[0].typsz=sizeof(int);

  memcpy(header.columns[1].name.buff,
         "my_col2",
          7);
 header.columns[1].name.sz=7;
  header.columns[1].loc=1;
  header.columns[1].typsz=sizeof(float);
  header.sz=2;


  // Add data to layout
  ArrayLayout lay(header, 10);
  stam st;
  st.i=1;
  st.f=1.3;
  int s;
  __ASSERT_EQUAL_MESSAGE(0 == (s=lay.addEntry(&st)),"test_addEntry_multi")
   __SYS_CALL_TEST_RETURN(s)
   st.i=2;
   st.f=1.6; 
  __ASSERT_EQUAL_MESSAGE(0 == (s=lay.addEntry(&st)), "test_addEntry_multi")
  __SYS_CALL_TEST_RETURN(s)


  // Prepare Comp 
  ColName names[1];
  RawVal vals[1];
  //float val=1.6;
  vals[0]= 2;
  //vals[0]=__DAT_TO_RAW(f);
  /// CONTINUE HERE
  memcpy(names[0].buff,
         "my_col1",
          7);
  names[0].sz=7;
  Comparable comp(names, vals, 1);
  unsigned int chng=3;
  __ASSERT_EQUAL_MESSAGE(8 == (s=lay.updateEntry(comp,&chng)), 
                          "test_updateEntry") 
  vals[0]= 3;
  Comparable comp2(names, vals, 1);
    __ASSERT_EQUAL_MESSAGE(8 == (s=lay.findEntry(comp2,&st)), 
                          "test_updateEntry") 
  

  return 0;
}
